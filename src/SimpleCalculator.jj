/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SimpleCalculator.jj */
/*@egen*/options {
STATIC = false ;
}


/**
* In terminal, call:
* jjtree SimpleCalculator.jjt
* javacc SimpleCalculator.jj
* java SimpleCalculator
* Enter input hereafter
*/

PARSER_BEGIN(SimpleCalculator)
    public class SimpleCalculator/*@bgen(jjtree)*/implements SimpleCalculatorTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTSimpleCalculatorState jjtree = new JJTSimpleCalculatorState();

/*@egen*/
        public static void main( String[] args ) throws TokenMgrError, ParseException {
            SimpleCalculator parser = new SimpleCalculator( new java.io.StringReader(args[0]) ) ;
            SimpleNode root = parser.Program();
            root.dump("");
        }
    }
PARSER_END(SimpleCalculator)

SKIP : { " " }
TOKEN : { <EOL : "\n" | "\r" | "\r\n" >}
TOKEN : { <#DIGITS : (["0"-"9"])+ >}
TOKEN : { <PLUS : "+"> }
TOKEN : { <NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "." <DIGITS> >}
TOKEN : { <MINUS : "-" >}
TOKEN : { <DIVIDE : "/" >}
TOKEN : { <TIMES : "*" >
| <LPAR : "(">
| <RPAR : ")">
| <PREVIOUS : "$">
}

SimpleNode Program()          : {/*@bgen(jjtree) PROGRAM */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) PROGRAM */
    try {
/*@egen*/
    (Expression() <EOL>)* (<EOL>)?/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ {return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Term ()       : {/*@bgen(jjtree) TERM */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) TERM */
    try {
/*@egen*/
    Primary() ( <TIMES> Primary() | <DIVIDE> Primary() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Expression()             : {/*@bgen(jjtree) EXPRESSION */
                                  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) EXPRESSION */
    try {
/*@egen*/
    Term()  (<PLUS> Term() | <MINUS> Term() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Primary()          : {/*@bgen(jjtree) PRIMARY */
    SimpleNode jjtn000 = new SimpleNode(JJTPRIMARY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) PRIMARY */
    try {
/*@egen*/
    t = <NUMBER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.value = t.image;}
    |
    t = <PREVIOUS>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.value = t.image;}
    |
    <LPAR> Expression() <RPAR>
    |
    <MINUS> Primary()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}